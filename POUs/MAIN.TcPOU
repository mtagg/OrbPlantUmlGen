<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{54cdbe1a-8209-49db-bd38-4bf5a679b4fd}" SpecialFunc="None">
    <Declaration><![CDATA[{warning 'TODO: Example'}
//{error 'TODO: Example'}
PROGRAM MAIN
VAR	
	// Objects:
	eMainState : E_MainState := E_MainState.Initialization; //This enumeration handles the case statement in main
	fbModeHandler : FB_ModeHandler; //ModeHandler is where the end user states are handled
	fbTimestamp : FB_Timestamp; //Create a timestamp object
	fbDbEventLogger : FB_DbEventLogger;	
	
	// Event Log Variables:
	aMainEventLog : ARRAY[1..SystemConfig.MAIN_EVENT_LOG_MAX_LENGTH] OF ST_Event; // Error-log array
	nMainEventLogSize : UINT := 0; // The length of the array with valid errors
	nEventLogErrorCounter : ULINT := 0;	// Error tracking during logging. if this starts to accumulate, need to adjust buffer parameters in FB_DbEventLogger
	nEventCounter : ULINT := 0; // Number of events accumulated during run-time
	
	// Database FB Error Handling IO:
	bDbEnabled : BOOL := TRUE; // change to false to run local without DB
	bDbCriticalError : BOOL := FALSE;
	sDbCriticalErrorMessage : T_MaxString;
	bCaseEnded : BOOL := FALSE;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[UpdateTimeStamps(); //Method from fbTimestamp object to update the current timestamp as of the PLC cycle
CheckEstopReset(); // TODO: Add this back in when ESTOP program is redone
CheckDbFailure();
		
CASE eMainState OF
	
	E_MainState.Initialization :
	
		IF bDbEnabled THEN
			IF NOT fbDbEventLogger.DbCreated THEN
				EventLogInit();
			ELSE
				Setup();
				eMainState := E_MainState.Running;
			END_IF
		ELSE
			Setup();
			eMainState := E_MainState.Running;
		END_IF
		

	E_MainState.Running :

		fbModeHandler();
		IF bDbEnabled THEN
			nEventCounter := nEventCounter + nMainEventLogSize; 
			LogPlcCycleEvents(); // Queue the current cycle's events before next cycle starts
		END_IF
		
		// Catch the end of a case
		IF fbModeHandler.InnerState = E_ModeHandlerStates.EndCase THEN
			bCaseEnded := TRUE;
		END_IF
		
		// Catch the transition from end-case to Idle before shutting down Database
		IF bCaseEnded AND (fbModeHandler.InnerState = E_ModeHandlerStates.Idle) THEN
			eMainState:= E_MainState.Shutdown;
			bCaseEnded := FALSE;
		END_IF
		
	E_MainState.Shutdown : 
		IF bDbEnabled THEN		
			IF EventLogClose() THEN
				EventLogReset();
				eMainState := E_MainState.Idle;
			END_IF
		ELSE
			eMainState := E_MainState.Idle;
		END_IF
		
	E_MainState.Idle:
		fbModeHandler(); // mode handler should be idle, no event logging necessary here, just polling for updates

		IF fbModeHandler.InnerState <> E_ModeHandlerStates.Idle THEN
			eMainState:= E_MainState.Initialization;
		END_IF
		
	E_MainState.DbFailure:
		// Failure mode, initialization failed, PLC program should not be allowed to continue.
		sDbCriticalErrorMessage := fbDbEventLogger.sCriticalErrorMessage;

END_CASE;]]></ST>
    </Implementation>
    <Method Name="CheckDbFailure" Id="{b0f6aa1a-80c6-429b-8bbc-da4c2bcfb131}">
      <Declaration><![CDATA[METHOD PRIVATE CheckDbFailure : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sDbCriticalErrorMessage := fbDbEventLogger.sCriticalErrorMessage;
IF fbDbEventLogger.bCriticalError THEN
	bDbCriticalError := TRUE;
	eMainState := E_MainState.DbFailure;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEstopReset" Id="{73a2a8dd-d948-4e7f-bebf-9e865babfe6f}">
      <Declaration><![CDATA[METHOD CheckEstopReset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF Safety.GVL_bEstopErrACK THEN
	Safety.GVL_bEstopErrACK := FALSE;
	//Update Reset signal
//	Safety.GVL_bEstopReset := Safety.GVL_bEstopResetInput; // TODO: update safety program to have reset directly linked to EL1259 Channel8 input
	Safety.GVL_bEstopReset := TRUE;			
	Safety.GVL_bEstopRun := TRUE;
ELSE
	IF Safety.GVL_bEstopResetInput THEN
		Safety.GVL_bEstopRun := FALSE;
		Safety.GVL_bEstopErrACK := TRUE;
	ELSE
		Safety.GVL_bEstopReset := FALSE;
	END_IF

END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EventLogClose" Id="{ba1a6545-8c1b-4e79-89c7-e5ba34d7ef7c}">
      <Declaration><![CDATA[METHOD PRIVATE EventLogClose : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Keep calling DbClosed Until finished
IF NOT fbDbEventLogger.DbClosed THEN
	fbDbEventLogger(bClose:=TRUE);
	EventLogClose:= FALSE;
ELSE
	EventLogClose:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="EventLogInit" Id="{e9404fa5-32bc-4830-b1ec-8f1e2a960b48}">
      <Declaration><![CDATA[METHOD PRIVATE EventLogInit : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbDbEventLogger(sAmsNetId:=SystemConfig.AMS_NET_ID, 
					sDbPath:= SystemConfig.EVENT_LOG_DIR_PATH, 
							sTimestamp:=DateTime.GVL_DATE_STRING,
								stEventArrayIn:=aMainEventLog,
									nEventArraySize:=nMainEventLogSize);



]]></ST>
      </Implementation>
    </Method>
    <Method Name="EventLogReset" Id="{fa2b3b9e-aa52-4440-9ac1-98635225456d}">
      <Declaration><![CDATA[METHOD PRIVATE EventLogReset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbDbEventLogger(bResetDbInitialization := TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogPlcCycleEvents" Id="{cab6421a-2909-4dc7-8cfc-fa6ced084c02}">
      <Declaration><![CDATA[METHOD PRIVATE LogPlcCycleEvents : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbDbEventLogger(); // Buffer the current plc cycle's events
IF fbDbEventLogger.bError THEN
	nEventLogErrorCounter := nEventLogErrorCounter + 1; 
ELSE
	LogPlcCycleEvents := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{8798fdf3-47bd-4fa4-b448-3179e9ef5d3c}">
      <Declaration><![CDATA[METHOD PRIVATE Setup : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbModeHandler(eStateSourceID := E_StateSourceID.ModeHandler, 
						aErrorLog := aMainEventLog,
							 nErrorLogIndex := nMainEventLogSize);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateTimeStamps" Id="{ecd72610-919d-4e3a-9cd2-e9d635f68cde}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateTimeStamps : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbTimestamp.UpdateTimestamp();
DateTime.GVL_DATE_STRING := fbTimestamp.DateString;
DateTime.GVL_DATE_TIME := fbTimestamp.DateTime;
DateTime.GVL_TIME_STRING := fbTimestamp.TimeString;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="913" Count="0" />
      <LineId Id="917" Count="1" />
      <LineId Id="1184" Count="0" />
      <LineId Id="919" Count="2" />
      <LineId Id="1223" Count="0" />
      <LineId Id="922" Count="3" />
      <LineId Id="1211" Count="0" />
      <LineId Id="1221" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="1065" Count="0" />
      <LineId Id="1215" Count="0" />
      <LineId Id="1222" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="1177" Count="0" />
      <LineId Id="932" Count="0" />
      <LineId Id="936" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1298" Count="0" />
      <LineId Id="940" Count="1" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1269" Count="2" />
      <LineId Id="1273" Count="0" />
      <LineId Id="1275" Count="0" />
      <LineId Id="1217" Count="0" />
      <LineId Id="1120" Count="0" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="1100" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1093" Count="0" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1094" Count="0" />
      <LineId Id="1245" Count="1" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1090" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="1124" Count="0" />
      <LineId Id="1220" Count="0" />
      <LineId Id="1218" Count="0" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1097" Count="1" />
      <LineId Id="1172" Count="2" />
      <LineId Id="950" Count="1" />
    </LineIds>
    <LineIds Name="MAIN.CheckDbFailure">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.CheckEstopReset">
      <LineId Id="8" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.EventLogClose">
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.EventLogInit">
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.EventLogReset">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.LogPlcCycleEvents">
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Setup">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.UpdateTimeStamps">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
	>>
	>>Start of Method : InnerLoopSM
	>>
	>>
	fbRightArm();
	fbLeftArm();
	CASE CyclicInnerCase(TO_STRING(eInnerState)) OF
		E_ModeHandlerStates.Idle:
			bGoToIdle := FALSE; 
			IF Halt AND bEndCase THEN
				bEndCase := FALSE;
				ChangeInnerState(E_ModeHandlerStates.EndCase);
			ELSE
				IF bStartSelftest THEN
					bStartSelftest := FALSE;
					IF NOT (bRightArmEnabled OR bLeftArmEnabled) THEN
						fbEventHandler(eNapID:=E_Event.NO_ARMS_ENABLED);
					ELSIF ArmsDocked <> E_Arm.Both THEN
						bNeedToDock := TRUE; 
					ELSE
						bNeedToDock := FALSE;
						fbRightArm.bActive:=bRightArmEnabled;
						fbLeftArm.bActive:=bLeftArmEnabled;
						ChangeInnerState(E_ModeHandlerStates.Selftest1);	
					END_IF
				ELSE
				END_IF			
			END_IF
		E_ModeHandlerStates.Selftest1:
			IF Halt THEN
				fbRightArm.bActive:=FALSE;
				fbLeftArm.bActive:=FALSE;
				ChangeInnerState(E_ModeHandlerStates.HaltSelftest);
			ELSE
				IF ArmsReady = E_Arm.Both THEN
					fbRightArm.bStartSelftest:=TRUE;
					fbLeftArm.bStartSelftest:=TRUE;
					ChangeInnerState(E_ModeHandlerStates.Selftest2);
				ELSIF ArmsFailed <> E_Arm.None THEN
					ReportFailedArm();
					bError := TRUE;
				ELSE
				END_IF	
			END_IF
		E_ModeHandlerStates.Selftest2:
			IF Halt THEN
				fbRightArm.bActive:=FALSE;
				fbLeftArm.bActive:=FALSE;
				ChangeInnerState(E_ModeHandlerStates.HaltSelftest);
			ELSE
				IF ArmsReady = E_Arm.Both THEN
					IF ArmsCalibrated = E_Arm.Both THEN
						ChangeInnerState(E_ModeHandlerStates.Ergonomics1);
					ELSE
						ReportUncalibratedArm();
						bError := TRUE;
					END_IF
				ELSIF ArmsFailed <> E_Arm.None THEN
					IF CheckForFailedDockedArms() THEN
						bNeedToDock := TRUE;				
						ChangeInnerState(E_ModeHandlerStates.HaltSelftest);
					ELSE
						bError := TRUE;
					END_IF
				ELSE
				END_IF
			END_IF
		E_ModeHandlerStates.HaltSelftest:
			IF ArmsReady = E_Arm.Both THEN
				IF bEndCase THEN
					ChangeInnerState(E_ModeHandlerStates.EndCase);
				ELSE
					ChangeInnerState(E_ModeHandlerStates.Idle); 
				END_IF
			ELSIF ArmsFailed <> E_Arm.None THEN
				ReportFailedArm();
				bError := TRUE;
			ELSE
			END_IF	
		E_ModeHandlerStates.Ergonomics1:
			fbRightArm.bStartErgonomics := TRUE;
			fbLeftArm.bStartErgonomics := TRUE;
			ResetErgonomicsCommands();
			bErgoBusy := FALSE;
			ChangeInnerState(E_ModeHandlerStates.Ergonomics2);
		E_ModeHandlerStates.Ergonomics2:
			ReportArmVariables();
			IF Halt THEN
				IF bEstopPressed THEN
					IF fbRightArm.ErgoWaiting AND fbLeftArm.ErgoWaiting THEN
						{warning 'TODO capture current ergo motor positions/calibration}
					ELSE
						{warning 'TODO force calibration on next selftest}
					END_IF
				END_IF
				fbRightArm.StopMotors := TRUE;
				fbLeftArm.StopMotors := TRUE;
				ChangeInnerState(E_ModeHandlerStates.HaltErgonomics);
			ELSE
				IF fbRightArm.Ready AND  fbLeftArm.Ready THEN
					ChangeInnerState(E_ModeHandlerStates.Teleoperation1);
				ELSE
					IF fbRightArm.ErgoWaiting AND fbLeftArm.ErgoWaiting THEN
						bErgoBusy := FALSE;
						fbRightArm.ErgoCommands := stFrontEnd.stErgoCommands_FE;
						fbLeftArm.ErgoCommands := stFrontEnd.stErgoCommands_FE;	
					ELSE
						bErgoBusy := TRUE;
					END_IF
					IF fbRightArm.Failed THEN
						fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbRightArm.EventTrace);
						fbRightArm.ErrorAck:=TRUE;
						bError := TRUE;
					END_IF
					IF fbLeftArm.Failed THEN
						fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbLeftArm.EventTrace);
						fbLeftArm.ErrorAck:=TRUE;
						bError := TRUE;
					END_IF
				END_IF
			END_IF		
		E_ModeHandlerStates.HaltErgonomics:
			ReportArmVariables();
			IF ArmsReady = E_Arm.Both THEN
				IF bEndCase THEN
					ChangeInnerState(E_ModeHandlerStates.EndCase);
				ELSE
					ChangeInnerState(E_ModeHandlerStates.Idle); 
				END_IF
			ELSIF ArmsFailed <> E_Arm.None THEN
				ReportFailedArm();
				bError := TRUE;
			ELSE
			END_IF	
		E_ModeHandlerStates.Teleoperation1:
			ReportArmVariables();
			IF Halt THEN
				bNeedToDock := TRUE;
				ChangeInnerState(E_ModeHandlerStates.HaltTeleoperation);
			ELSE
				IF ArmsDocked = E_Arm.Both THEN
					bNeedToDock := FALSE;
					ChangeInnerState(E_ModeHandlerStates.Teleoperation2);
				ELSE
					bNeedToDock := TRUE;
				END_IF
			END_IF
		E_ModeHandlerStates.Teleoperation2:
			ReportArmVariables();
			IF Halt THEN
				ChangeInnerState(E_ModeHandlerStates.HaltTeleoperation);
			ELSE
				IF ArmsDocked <> E_Arm.Both THEN
					ChangeInnerState(E_ModeHandlerStates.Teleoperation3);
				ELSE
				END_IF
			END_IF
		E_ModeHandlerStates.Teleoperation3:
			ReportArmVariables();
			IF Halt THEN
				ChangeInnerState(E_ModeHandlerStates.HaltTeleoperation);
			ELSE
				IF ArmsDocked = E_Arm.Both THEN
					fbRightArm.bStartTeleoperation:=TRUE;
					fbLeftArm.bStartTeleoperation:=TRUE;
					ResetTeleopCommands();
					ChangeInnerState(E_ModeHandlerStates.TeleopSetup);
				ELSE
				END_IF
			END_IF
		E_ModeHandlerStates.TeleopSetup:
			ReportArmVariables();
			IF Halt THEN
				fbRightArm.bStopTeleoperation := TRUE;
				fbLeftArm.bStopTeleoperation := TRUE;
				ChangeInnerState(E_ModeHandlerStates.HaltTeleoperation);
			ELSE
				IF ArmsFailed = E_Arm.None THEN
					IF ArmsDocked = E_Arm.Both THEN
						fbRightArm.TeleopCommands := stFrontEnd.stTeleopCommands_FE.stRightArmCommands;
						fbLeftArm.TeleopCommands := stFrontEnd.stTeleopCommands_FE.stLeftArmCommands;
					ELSE
						fbRightArm.bTeleopOperational:=TRUE;
						fbLeftArm.bTeleopOperational:=TRUE;
						ChangeInnerState(E_ModeHandlerStates.TeleopActive);
					END_IF
				ELSE 
					IF fbRightArm.Failed THEN
						fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbRightArm.EventTrace);
						fbRightArm.ErrorAck:=TRUE;
						bError := TRUE;
					END_IF
					IF fbLeftArm.Failed THEN
						fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbLeftArm.EventTrace);
						fbLeftArm.ErrorAck:=TRUE;
						bError := TRUE;
					END_IF
				END_IF
			END_IF
		E_ModeHandlerStates.TeleopActive:
			ReportArmVariables();	
			IF Halt THEN
				IF ArmsDocked = E_Arm.Both THEN	
					bNeedToDock := FALSE;
					fbRightArm.bStopTeleoperation := TRUE;
					fbLeftArm.bStopTeleoperation := TRUE;
					ChangeInnerState(E_ModeHandlerStates.HaltTeleoperation);
				ELSE
					bNeedToDock := TRUE;
				END_IF
			ELSE
				IF ArmsFailed = E_Arm.None THEN
					IF ArmsDocked <> E_Arm.Both THEN
						fbRightArm.bTeleopOperational:=FALSE;
						fbLeftArm.bTeleopOperational:=FALSE;
						ChangeInnerState(E_ModeHandlerStates.TeleopSetup);
					ELSIF fbRightArm.ErrorNeedToDock OR fbLeftArm.ErrorNeedToDock THEN
						ChangeInnerState(E_ModeHandlerStates.HaltTeleoperation);
					ELSE
					END_IF
				ELSE
					IF fbRightArm.Failed THEN
						fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbRightArm.EventTrace);
						fbRightArm.ErrorAck:=TRUE;
					END_IF
					IF fbLeftArm.Failed THEN
						fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbLeftArm.EventTrace);
						fbLeftArm.ErrorAck:=TRUE;
					END_IF
					bError := TRUE;
				END_IF		
			END_IF
		E_ModeHandlerStates.HaltTeleoperation:
			ReportArmVariables();
			IF ArmsReady = E_Arm.Both THEN
				IF bEndCase THEN
					ChangeInnerState(E_ModeHandlerStates.EndCase);
				ELSE
					ChangeInnerState(E_ModeHandlerStates.Idle); 
				END_IF
			ELSIF ArmsFailed <> E_Arm.None THEN
				ReportFailedArm();
				bError := TRUE;
			ELSE
			END_IF	
		E_ModeHandlerStates.EndCase:
			ReportArmVariables();
			{warning 'TODO add any variable resets necessary to transition to a new case'}
			Reset();
			ChangeInnerState(E_ModeHandlerStates.Idle);
	END_CASE
	UpdateFrontend();
	UpdatePanelLEDs();


States found:
	eInnerState
Methods Found:
	InnerLoopSM
Method-Case Pairs Found:

<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_StateMachine" Id="{6a5e3c2c-15ca-463d-880f-c5775b0fbcc5}" SpecialFunc="None">
    <Declaration><![CDATA[{warning 'TODO: Remove all instances of bBusy and remove from VAR list in FB_StateMachine'}
FUNCTION_BLOCK FB_StateMachine IMPLEMENTS I_StateMachine
VAR_INPUT
	bActive : BOOL := TRUE;
	bErrorAck : BOOL;
	eStateSourceID : E_StateSourceID;
	
	aErrorLog : REFERENCE TO ARRAY[1..SystemConfig.MAIN_EVENT_LOG_MAX_LENGTH] OF ST_Event; //Reference to the event array initially created in MAIN
	nErrorLogIndex : REFERENCE TO UINT; //Reference to the logging index initially defined in MAIN, should be 0 at the beginning of each PLC cycle
END_VAR

VAR
	// Outer-Case State Tracking Variables
	eOuterLoopState : E_OuterLoopSM_States;
	sOuterLoopState : T_MaxString := '';
	nLastOuterLoopState : UINT := 0;	
	nOuterTempState : UINT := 0;
	sLastOuterLoopState : T_MaxString := '';
	
	// Inner-Case State Tracking Variables
	nInnerLoopState : REFERENCE TO UINT;
	sInnerLoopState : T_MaxString := '';
	nLastInnerLoopState : UINT := 0;
	nInnerTempState : UINT := 0;
	sLastInnerLoopState : T_MaxString := '';
	
	// DB Logging Stuff
	eStateMachineSourceID : E_StateSourceID;
	fbEventHandler : FB_EventHandler;
	sEventTrace	: T_MaxString := '';
	
	bBusy : BOOL;
	
//	bEnableOuterStateChanges : BOOL := SystemConfig.ENABLE_OUTER_STATE_CHANGES;
//	bEnableInnerStateChanges : BOOL := SystemConfig.ENABLE_INNER_STATE_CHANGES;
END_VAR

VAR_OUTPUT
	bError : BOOL;
	sErrorDetails : T_MaxString;			
	nErrorInTask : UINT;			
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
]]></ST>
    </Implementation>
    <Folder Name="Properties" Id="{1cee6584-11c8-4121-9121-beb8e2403f7c}" />
    <Property Name="Active" Id="{4d9542d2-fdf4-4551-be1a-1178557ec911}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{84bd4977-10df-46ae-978a-3b42c8120a31}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := THIS^.bActive;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{10036ecc-aac9-444f-9bd3-f5f6a6991dd4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bActive := Active;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Busy" Id="{c397c92b-d476-40b1-8895-b4a7aa72ae57}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{35fc2301-9d2a-4775-ae72-dcf203ff6219}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[//Busy := isBusy();

(*
	Returns THIS^.bBusy in all cases except:
	1. We are enabled/active and transitioning to Operational - This will return FALSE until operational
	2. We are enabled/active and in Setup.
	3. We are enabled/active and in either DisablingError or DisablingInactive
*)

IF bActive THEN
	
	IF eOuterLoopState = E_OuterLoopSM_States.DisabledError THEN
		Busy := FALSE; // Not busy when active and waiting for error ack 
	ELSIF eOuterLoopState <> E_OuterLoopSM_States.Operational THEN
		Busy := TRUE; // Busy if we are active and not operational
	ELSE 
		Busy := (nInnerLoopState <> 0); // Busy In operational, if we are not idle
	END_IF
	
ELSE // NOT bActive
	
	IF eOuterLoopState = E_OuterLoopSM_States.Inactive THEN
		IF nOuterTempState =  E_OuterLoopSM_States.Inactive THEN
			Busy := FALSE; // Busy until we spend at least 1 cycle inactive
		ELSE
			Busy := TRUE; // We have spent at least 1 cycle inactive
		END_IF
	ELSIF eOuterLoopState = E_OuterLoopSM_States.DisabledError THEN
		Busy := FALSE; // Not busy while waiting for error ack
	ELSE
		Busy := TRUE; // Busy until we reach inactive state
	END_IF
	
END_IF
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ChangeInnerState" Id="{61ea47ef-d8bd-428e-a0d3-2bd070ba40de}">
      <Declaration><![CDATA[METHOD ChangeInnerState : BOOL
VAR_INPUT
	nNewState : UINT;
END_VAR
	]]></Declaration>
      <Implementation>
        <ST><![CDATA[nInnerLoopState := nNewState;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ChangeOuterState" Id="{8436ae5e-f601-4561-8792-634fb7f208b5}">
      <Declaration><![CDATA[METHOD ChangeOuterState : BOOL
VAR_INPUT
	nNewState	: E_OuterLoopSM_States;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eOuterLoopState := nNewState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicInnerCase" Id="{a3fb859c-d59d-43e7-a381-a08e5bee0551}">
      <Declaration><![CDATA[(*
Use the method as Case Variable ->
CASE CyclicInnerCase(TO_String(enum)) OF
1: ;
2: ;
ELSE ;
END_CASE
*)
METHOD PROTECTED CyclicInnerCase : UINT
VAR_INPUT
    sState : T_MaxString;//Name of the current state (TO_String(enum))
END_VAR
VAR_INST
    bInit : BOOL := TRUE;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF (THIS^.nInnerTempState <> THIS^.nInnerLoopState) OR bInit THEN	
	// Save PreviousState
	IF bInit THEN
//		THIS^.nInnerLoopState := 0;
		THIS^.nLastInnerLoopState := THIS^.nInnerLoopState;
		THIS^.sLastInnerLoopState := sState;
		bInit := FALSE;
	ELSE
		THIS^.nLastInnerLoopState := THIS^.nInnerTempState;
		THIS^.sLastInnerLoopState := THIS^.sInnerLoopState;
		bInit := FALSE;
	END_IF
	
	// Save active State
	nInnerTempState := nInnerLoopState; 
	THIS^.sInnerLoopState := sState; //save aktive state string
	IF SystemConfig.ENABLE_INNER_STATE_CHANGES THEN
		fbEventHandler.SaveState(sLastState:=sLastInnerLoopState, sNewState:=sState, bOuter:=FALSE); //Logging after the new state has been adopted
	END_IF
END_IF


CyclicInnerCase := nInnerLoopState; //return state]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicOuterCase" Id="{fab6a548-cbb6-491f-bb21-2984f49a742f}">
      <Declaration><![CDATA[(*
Use the method as Case Variable ->
CASE CyclicOuterCase(TO_String(enum)) OF
1: ;
2: ;
ELSE ;
END_CASE
*)

{attribute 'monitoring':='variable'}
METHOD PRIVATE CyclicOuterCase : UINT
VAR_INPUT
    sState : T_MaxString;//Name of the current state (TO_String(enum))
END_VAR
VAR_INST
    bInit : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
IF (THIS^.nOuterTempState <> THIS^.eOuterLoopState) OR bInit THEN

	// Save PreviousState
	IF bInit THEN
		THIS^.nLastOuterLoopState := THIS^.eOuterLoopState;
		THIS^.sLastOuterLoopState := sState;
	ELSE
		THIS^.nLastOuterLoopState := THIS^.nOuterTempState;
		THIS^.sLastOuterLoopState := THIS^.sOuterLoopState;
	END_IF
	// Save active State
	nOuterTempState := eOuterLoopState; 
	THIS^.sOuterLoopState := sState; //save aktive state string
	IF bInit THEN
		// Skips first outer state transition into setup.
		bInit := FALSE;
		
	ELSIF SystemConfig.ENABLE_OUTER_STATE_CHANGES THEN 
		fbEventHandler.SaveState(sLastState:=sLastOuterLoopState, sNewState:=sState, bOuter:=TRUE); //Logging after the new state has been adopted
	END_IF
	
END_IF


CyclicOuterCase := eOuterLoopState; //return state



]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{ee22807d-35ad-48d7-b113-a8185df15c69}">
      <Declaration><![CDATA[METHOD Disable : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Default SUPER^.Disable method for all inheriting FBs.
// This will reset the bBusy flag and trigger an error for unimplemented Disable() methods.

fbEventHandler(eNapID:=E_Event.UNIMPLEMENTED_DISABLE_METHOD);
THIS^.bError := TRUE; // Redundant 
THIS^.bBusy := FALSE;
Disable := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorAck" Id="{97eadf24-291b-4e7e-a36e-d4b50809b026}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ErrorAck : BOOL]]></Declaration>
      <Get Name="Get" Id="{627898e5-a9f7-4d67-8e47-b49aa613b45a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorAck := bErrorAck;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{085caf73-989a-413f-bac8-4428d967d718}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bErrorAck := ErrorAck;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="EventTrace" Id="{edbf6dc4-ea5c-4983-8228-904adbc35a0c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY EventTrace : STRING]]></Declaration>
      <Get Name="Get" Id="{2c818f06-36fa-44d0-b6fc-59fa7b0cc03e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EventTrace := THIS^.sEventTrace;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="InnerLoopSM" Id="{aa4c3d85-62e3-4797-b923-0fb9bbbd55f4}">
      <Declaration><![CDATA[METHOD InnerLoopSM : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OuterLopSM" Id="{32768734-abdf-415d-ac7e-7bc8b3c39e77}">
      <Declaration><![CDATA[METHOD OuterLopSM : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE CyclicOuterCase(sState:=TO_STRING(eOuterLoopState)) OF
	
	E_OuterLoopSM_States.Setup:
	//<<<Setup()>>>
		Setup();
		Setup_0();
		IF bActive THEN
			//<<<Reset()>>>
			Reset();
			ChangeOuterState(E_OuterLoopSM_States.Operational);
		ELSE
			ChangeOuterState(E_OuterLoopSM_States.Inactive);
		END_IF
		
	E_OuterLoopSM_States.Operational:
		IF bError THEN 
			ChangeOuterState(E_OuterLoopSM_States.DisablingError);
		ELSIF bActive THEN // No error, Active
			//<<<InnerLoopSM()>>>
			InnerLoopSM();
		ELSE // No error, not active
			ChangeOuterState(E_OuterLoopSM_States.DisablingInactive);
		END_IF

	E_OuterLoopSM_States.DisablingInactive:
		IF Disable() THEN
			ChangeOuterState(E_OuterLoopSM_States.Inactive);
		END_IF
	
	E_OuterLoopSM_States.Inactive:
		IF bActive THEN
			//<<<Reset()>>>
			//<<<ChangeInnerState(Idle)>>>
			Reset();
			ChangeInnerState(0);
			ChangeOuterState(E_OuterLoopSM_States.Operational);
		END_IF

	E_OuterLoopSM_States.DisablingError:
		IF Disable() THEN
			ChangeOuterState(E_OuterLoopSM_States.DisabledError);
		END_IF
	
	E_OuterLoopSM_States.DisabledError:
		IF bErrorAck THEN
			bError := FALSE;
			//<<<bErrorAck := FALSE>>>
			bErrorAck := FALSE;
			ChangeOuterState(E_OuterLoopSM_States.Inactive);
		END_IF
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{e47b2e70-0ee6-4a26-9bab-58488c5443b6}">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetInnerEnumeration" Id="{dfd08693-0c3c-427d-a052-050772d7a686}">
      <Declaration><![CDATA[METHOD PUBLIC SetInnerEnumeration : BOOL
VAR_INPUT
	nStateEnum : REFERENCE TO UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.nInnerLoopState REF= nStateEnum; // This should pass the reference to the inner loop state enumeration variable]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{21afff8a-06ff-49f2-b06b-31ef6eb9d43c}">
      <Declaration><![CDATA[METHOD Setup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup_0" Id="{f43a19dc-99a3-439e-8bb3-d60ee2ddeb9a}">
      <Declaration><![CDATA[METHOD PRIVATE Setup_0 : BOOL
VAR_INPUT
END_VAR

VAR
	nParentInnerState: STRING(INT#4);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbEventHandler(aErrorLog:=aErrorLog,
					nErrorLogIndex:=nErrorLogIndex,
						eParentID:=eStateMachineSourceID,
							sParentTrace:=sEventTrace,
								sLastParentInnerState:=sLastInnerLoopState,
									sParentInnerState:=sInnerLoopState);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StateMachineID" Id="{7a34e1c6-8d0d-422d-af05-1c8585ae9791}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY StateMachineID : STRING]]></Declaration>
      <Get Name="Get" Id="{64270503-62a6-4e7d-97a3-98c04c40015e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//StateMachineID := eStateMachineSourceID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_StateMachine">
      <LineId Id="107" Count="0" />
      <LineId Id="54" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Active.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Active.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Busy.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="8" />
      <LineId Id="41" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="38" Count="1" />
      <LineId Id="18" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="31" Count="1" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.ChangeInnerState">
      <LineId Id="13" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.ChangeOuterState">
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.CyclicInnerCase">
      <LineId Id="39" Count="1" />
      <LineId Id="6" Count="2" />
      <LineId Id="57" Count="0" />
      <LineId Id="9" Count="11" />
      <LineId Id="74" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.CyclicOuterCase">
      <LineId Id="204" Count="6" />
      <LineId Id="212" Count="2" />
      <LineId Id="216" Count="3" />
      <LineId Id="245" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="220" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Disable">
      <LineId Id="4" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.ErrorAck.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.ErrorAck.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.EventTrace.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.InnerLoopSM">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.OuterLopSM">
      <LineId Id="90" Count="2" />
      <LineId Id="168" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="102" Count="2" />
      <LineId Id="153" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="157" Count="2" />
      <LineId Id="155" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="117" Count="3" />
      <LineId Id="169" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="122" Count="5" />
      <LineId Id="129" Count="4" />
      <LineId Id="171" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="2" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Reset">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.SetInnerEnumeration">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Setup">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_StateMachine.Setup_0">
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="1" />
    </LineIds>
    <LineIds Name="FB_StateMachine.StateMachineID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
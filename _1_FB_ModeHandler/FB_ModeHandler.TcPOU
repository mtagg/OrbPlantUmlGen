<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ModeHandler" Id="{6c0947c2-5e26-462c-8382-998d509efbf9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModeHandler EXTENDS FB_StateMachine IMPLEMENTS I_StateMachine
VAR_INPUT

	
	
END_VAR
VAR
	
	bStartSelftest : BOOL;
//	bStartErgonomics : BOOL;
	
	fbRightArm  : FB_ControllerArm;
	fbLeftArm  : FB_ControllerArm;
	
	eInnerState : E_ModeHandlerStates;
	
	// TODO: Move to Front end handler struct
	bRightArmEnabled_FE : BOOL;
	bLeftArmEnabled_FE : BOOL;
	bGoToIdle_FE : BOOL;
	stRightErgoCommands_FE : ST_ErgoCommands;
	stLeftErgoCommands_FE : ST_ErgoCommands;
	//----
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[OuterLopSM();]]></ST>
    </Implementation>
    <Folder Name="HelperMethods" Id="{2d12926e-8a50-48b6-9e1a-efa916a93661}" />
    <Method Name="CheckForFailedArms" Id="{7f09cf03-80cb-4646-b0f7-89d0a85c7acc}" FolderPath="HelperMethods\">
      <Declaration><![CDATA[METHOD PRIVATE CheckForFailedArms : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF fbRightArm.Failed THEN
	fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbRightArm.EventTrace);
	fbRightArm.ErrorAck:=TRUE;
	bError := TRUE;
END_IF
IF fbLeftArm.Failed THEN
	fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbLeftArm.EventTrace);
	fbleftArm.ErrorAck:=TRUE;
	bError := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{f0c33d5d-a727-4e9b-899e-99c055939f7f}">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR
	 bChildBusy : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRightArm(bActive:=FALSE);
fbLeftArm(bActive:=FALSE);

IF NOT fbRightArm.Ready THEN
	bChildBusy := TRUE; 
ELSIF  fbRightArm.Failed THEN
	bChildBusy := TRUE; 
	//	Stack trace and bError switching are reserved for inner loop
	fbRightArm.ErrorAck:=TRUE; // allow the arm to go Operational>DisablingInactive>Inactive
END_IF


IF NOT fbLeftArm.Ready THEN
	bChildBusy := TRUE; 
ELSIF  fbLeftArm.Failed THEN
	bChildBusy := TRUE; 
	//	Stack trace and bError switching are reserved for inner loop
	fbLeftArm.ErrorAck:=TRUE; // allow the arm to go Operational>DisablingInactive>Inactive
END_IF




IF bChildBusy THEN
	Disable := FALSE;
ELSE
	Disable := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableArms" Id="{9bfb5c38-ae9a-458f-a1e8-9656e5b84026}">
      <Declaration><![CDATA[METHOD EnableArms : BOOL
VAR_INPUT
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRightArm.Active:=bRightArmEnabled_FE;
fbLeftArm.Active:=bLeftArmEnabled_FE;
IF fbRightArm.Ready AND fbLeftArm.Ready THEN
	EnableArms := TRUE;
ELSE
	EnableArms := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InnerLoopSM" Id="{c624c509-7772-4048-ab11-e15ae6fe4d6b}">
      <Declaration><![CDATA[METHOD InnerLoopSM : BOOL
VAR
	bGoToUndocked: BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// update all children FBs
ReadStatus();
fbRightArm();
fbLeftArm();

CASE CyclicInnerCase(TO_STRING(eInnerState)) OF
	E_ModeHandlerStates.Idle:
		IF bStartSelftest THEN
			IF EnableArms() THEN
				ChangeInnerState(E_ModeHandlerStates.Selftest1);
				bStartSelftest := FALSE;
			END_IF
		END_IF
		
	E_ModeHandlerStates.Selftest1:
		IF fbRightArm.Ready AND  fbLeftArm.Ready THEN
			fbRightArm.StartSelftest:=TRUE;
			fbLeftArm.StartSelftest:=TRUE;
			ChangeInnerState(E_ModeHandlerStates.Selftest2);
		ELSE
			sErrorDetails := CONCAT4('fbRightArm.bReady/fbLeftArm.bReady = ',BOOL_TO_STRING(fbRightArm.Ready),'/',BOOL_TO_STRING(fbLeftArm.Ready));
			fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sMessage:=sErrorDetails);
			bError := TRUE;
 		END_IF

	E_ModeHandlerStates.Selftest2:
		IF fbRightArm.Ready AND fbLeftArm.Ready THEN
			IF fbRightArm.Calibrated AND fbLeftArm.Calibrated THEN
				ChangeInnerState(E_ModeHandlerStates.Ergonomics1);
			ELSE
				sErrorDetails := CONCAT4('fbRightArm.Calibrated/fbLeftArm.Calibrated = ',BOOL_TO_STRING(fbRightArm.Calibrated),'/', BOOL_TO_STRING(fbLeftArm.Calibrated));				
				fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
				bError := TRUE;
			END_IF
		ELSE
			// Check/report errors from both arms
			IF fbRightArm.Failed THEN
				IF NOT fbRightArm.Docked THEN
					fbEventHandler(eNapID:=E_Event.TASK_INTERRUPTED,sTrace:=fbRightArm.EventTrace);
					fbRightArm.ErrorAck:=TRUE;
					fbRightArm.Active:=TRUE;
					bGoToUndocked := TRUE;
				ELSE
					fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbRightArm.EventTrace);
					fbRightArm.ErrorAck:=TRUE;
					bError := TRUE;
				END_IF
			END_IF
			IF fbLeftArm.Failed THEN
				IF NOT fbLeftArm.Docked THEN
					fbEventHandler(eNapID:=E_Event.TASK_INTERRUPTED,sTrace:=fbLeftArm.EventTrace);
					fbLeftArm.ErrorAck:=TRUE;
					fbLeftArm.Active:=TRUE;
					bGoToUndocked := TRUE;
				ELSE
					fbEventHandler(eNapID:=E_Event.TASK_FAILED,sTrace:=fbLeftArm.EventTrace);
					fbleftArm.ErrorAck:=TRUE;
					bError := TRUE;
				END_IF
			END_IF
		END_IF
		IF bGoToUndocked THEN
			ChangeInnerState(E_ModeHandlerStates.SelftestUndocked);
		END_IF	
		
	E_ModeHandlerStates.SelftestUndocked:
		IF fbRightArm.Docked AND fbLeftArm.Docked THEN
			bGoToUndocked := FALSE;
			ChangeInnerState(E_ModeHandlerStates.Selftest1);
		ELSE
			// Wait... one or both arms still undocked 	
		END_IF
		
	E_ModeHandlerStates.Ergonomics1:
		IF fbRightArm.Ready AND  fbLeftArm.Ready THEN
			IF fbRightArm.Calibrated AND fbLeftArm.Calibrated THEN
				fbRightArm.StartErgonomics:=TRUE;
				fbLeftArm.StartErgonomics:=TRUE;
				ChangeInnerState(E_ModeHandlerStates.Ergonomics2);
			ELSE
				sErrorDetails := CONCAT4('fbRightArm.Calibrated/fbLeftArm.Calibrated = ',BOOL_TO_STRING(fbRightArm.Calibrated),'/', BOOL_TO_STRING(fbLeftArm.Calibrated));
				fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sMessage:=sErrorDetails);
				bError := TRUE;
			END_IF
		ELSE
			sErrorDetails := CONCAT4('fbRightArm.bReady/fbLeftArm.bReady = ',BOOL_TO_STRING(fbRightArm.Ready),'/',BOOL_TO_STRING(fbLeftArm.Ready));
			fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sMessage:=sErrorDetails);
			bError := TRUE;
 		END_IF
		
	E_ModeHandlerStates.Ergonomics2:
		bBusy := TRUE;
		IF bGoToIdle_FE THEN
			fbRightArm.StopMotors := TRUE;
			fbLeftArm.StopMotors := TRUE;
			ChangeInnerState(E_ModeHandlerStates.HaltErgonomics);
		ELSE
			IF fbRightArm.Ready AND  fbLeftArm.Ready THEN
				// Ergonomics FB is complete or failed
				// No checks for validating completeness as was in Selftest
				ChangeInnerState(E_ModeHandlerStates.Teleoperation1);
			ELSE
				fbRightArm.ErgoCommands := stRightErgoCommands_FE;
				fbLeftArm.ErgoCommands := stLeftErgoCommands_FE;	// JogInwards, JogOutwards, MovetoX, DoneErgo
				CheckForFailedArms();
			END_IF
		END_IF		
		
	E_ModeHandlerStates.HaltErgonomics:
		IF fbRightArm.Ready AND  fbLeftArm.Ready THEN
			// Ergonomics FB is complete or failed
			// No checks for validating completeness as was in Selftest
			ChangeInnerState(E_ModeHandlerStates.Idle); //Ergonomics complete, return to Idle
		ELSE 
			CheckForFailedArms();
		END_IF
		
	E_ModeHandlerStates.Teleoperation1:
		IF fbRightArm.Ready AND  fbLeftArm.Ready THEN
			IF fbRightArm.Calibrated AND fbLeftArm.Calibrated THEN
				fbRightArm.StartTeleoperation:=TRUE;
				fbLeftArm.StartTeleoperation:=TRUE;
				ChangeInnerState(E_ModeHandlerStates.Teleoperation2);
			ELSE
				sErrorDetails := CONCAT4('fbRightArm.Calibrated/fbLeftArm.Calibrated = ',BOOL_TO_STRING(fbRightArm.Calibrated),'/', BOOL_TO_STRING(fbLeftArm.Calibrated));
				fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sMessage:=sErrorDetails);
				bError := TRUE;
			END_IF
		ELSE
			sErrorDetails := CONCAT4('fbRightArm.bReady/fbLeftArm.bReady = ',BOOL_TO_STRING(fbRightArm.Ready),'/',BOOL_TO_STRING(fbLeftArm.Ready));
			fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sMessage:=sErrorDetails);
			bError := TRUE;
 		END_IF	
	
	E_ModeHandlerStates.Teleoperation2:	
		// TODO
		
	E_ModeHandlerStates.EndCase:
		ChangeInnerState(E_ModeHandlerStates.Idle);
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="InnerState" Id="{35fef907-6842-4c83-856f-001348a1b297}">
      <Declaration><![CDATA[PROPERTY InnerState : UINT]]></Declaration>
      <Get Name="Get" Id="{33ce7ba3-71e0-47a0-97c1-b65ea3f59f31}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InnerState := THIS^.nInnerLoopState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReadStatus" Id="{64100a46-36d6-40c5-b88c-1b41c84cb5d5}">
      <Declaration><![CDATA[METHOD PRIVATE ReadStatus : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRightArm.ReadStatus();
fbLeftArm.ReadStatus();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{94e89460-f249-45e8-8a14-69c26ac89d67}">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// reset variables inherited from FB_StateMachine

(* should any of the following be reset??
bActive := FALSE;
bErrorAck := FALSE;
bAbort := FALSE;
bUserEnabled := FALSE;
*) 

// reset variables specific to this FB 
bStartSelftest := FALSE;
//bStartErgonomics := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{22fbb005-253f-497d-af95-41c508980381}">
      <Declaration><![CDATA[METHOD Setup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eStateMachineSourceID := eStateSourceID;
fbRightArm(eStateSourceID := E_StateSourceID.R_Arm,
					aErrorLog:=THIS^.aErrorLog,
					nErrorLogIndex:=THIS^.nErrorLogIndex,
					bActive := FALSE);
						
fbLeftArm(eStateSourceID := E_StateSourceID.L_Arm,
					aErrorLog:=THIS^.aErrorLog,
					nErrorLogIndex:=THIS^.nErrorLogIndex,
					bActive := FALSE);
					
SetInnerEnumeration(nStateEnum:=THIS^.eInnerState);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ModeHandler">
      <LineId Id="343" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.CheckForFailedArms">
      <LineId Id="6" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.Disable">
      <LineId Id="63" Count="26" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.EnableArms">
      <LineId Id="9" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.InnerLoopSM">
      <LineId Id="573" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="574" Count="9" />
      <LineId Id="589" Count="91" />
      <LineId Id="691" Count="9" />
      <LineId Id="711" Count="3" />
      <LineId Id="725" Count="13" />
      <LineId Id="724" Count="0" />
      <LineId Id="715" Count="2" />
      <LineId Id="746" Count="0" />
      <LineId Id="718" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.InnerState.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.ReadStatus">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.Reset">
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModeHandler.Setup">
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="36" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>
	>>
	>>Start of Method : InnerLoopSM
	>>
	>>
	CASE CyclicInnerCase(TO_STRING(eInnerState)) OF
		E_ErgonomicStates.Idle:
			IF bStart THEN			
				bStart := FALSE;
				IF fbStepper.Homed AND fbLinearActuator.Homed THEN
					ChangeInnerState(E_ErgonomicStates.EnableAxes1);
				ELSE
					sErrorDetails := CONCAT('fbStepper.Homed/fbLinearActuator.Homed = ',CONCAT(BOOL_TO_STRING(fbStepper.Homed),BOOL_TO_STRING(fbLinearActuator.Homed)));
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK, sMessage:=sErrorDetails);
					bError:=TRUE;
				END_IF
			END_IF
		E_ErgonomicStates.EnableAxes1:
			IF NOT (fbStepper.Ready AND fbLinearActuator.Ready) THEN
				sErrorDetails := CONCAT('fbStepper.Ready/fbLinearActuator.Ready = ',CONCAT(BOOL_TO_STRING(fbStepper.Ready),BOOL_TO_STRING(fbLinearActuator.Ready)));
				fbEventHandler(eNapID:=E_Event.SYSTEM_IN_UNEXPECTED_STATE,sMessage:=sErrorDetails);
				bError := TRUE;
			ELSE
				fbLinearActuator.bEnableAxis := TRUE;	
				fbStepper.bEnableAxis := TRUE;
				ChangeInnerState(E_ErgonomicStates.EnableAxes2);
			END_IF
		E_ErgonomicStates.EnableAxes2:
			IF fbLinearActuator.Busy THEN
				bMotorsDisabled := TRUE;
			ELSIF fbLinearActuator.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbLinearActuator.EventTrace);
					fbLinearActuator.ErrorAck := TRUE;
					bError := TRUE;
			ELSE
				bMotorsDisabled := FALSE;
			END_IF
			IF fbStepper.Busy THEN
				bMotorsDisabled := TRUE;
			ELSIF fbStepper.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbStepper.EventTrace);
					fbStepper.ErrorAck := TRUE;
					bError := TRUE;
			ELSE
				bMotorsDisabled := FALSE;
			END_IF
			IF NOT bMotorsDisabled THEN
				ChangeInnerState(E_ErgonomicStates.WaitForCommand);
			END_IF
		E_ErgonomicStates.WaitForCommand:
			IF stErgoCommands.Done OR bStop THEN
				bStop := FALSE;
				stErgoCommands.Done := FALSE;
				ChangeInnerState(E_ErgonomicStates.DisableMotors1);
			ELSE
				{warning 'MT TODO add motorenable checks here'}
				IF stErgoCommands.bApplyUserConfig_FE THEN
					stErgoCommands.bApplyUserConfig_FE := FALSE;
					fbStepper.fSetAngle := stErgoCommands.fStepperAngle_FE;
					ChangeInnerState(E_ErgonomicStates.SetStepperAngle1);
				ELSIF StepperJogRequired() THEN
					fbStepper.eJogDirection := stErgoCommands.eStepperJoggingDir_FE;
					stErgoCommands.eStepperJoggingDir_FE := E_StepperMotorMovingDirection.None;
					ChangeInnerState(E_ErgonomicStates.JogStepper1);
				ELSIF LinActuatorJogRequired() THEN
					fbLinearActuator.eJogDirection := stErgoCommands.eLAJoggingDir_FE;
					stErgoCommands.eStepperJoggingDir_FE := E_LinearActuatorMovingDirection.None;
					ChangeInnerState(E_ErgonomicStates.JogLinActuator1);
				END_IF
			END_IF
		E_ErgonomicStates.SetStepperAngle1:
			IF fbStepper.Busy THEN
				sErrorDetails := 'fbStepper.Busy = TRUE';
				fbEventHandler(eNapID:=E_Event.SYSTEM_IN_UNEXPECTED_STATE,sMessage:=sErrorDetails);
				bError := TRUE;
			ELSE	
				IF fbStepper.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sTrace:=fbStepper.EventTrace);
					fbStepper.ErrorAck := TRUE;
					bError := TRUE;
				ELSE
					fbStepper.bStartErgoAng:=TRUE;
					ChangeInnerState(E_ErgonomicStates.SetStepperAngle2);
				END_IF
			END_IF
		E_ErgonomicStates.SetStepperAngle2:
			IF fbStepper.Busy THEN
			ELSE	
				IF fbStepper.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbStepper.EventTrace);
					fbStepper.ErrorAck := TRUE;
					bError := TRUE;
				ELSE
					ChangeInnerState(E_ErgonomicStates.WaitForCommand);
				END_IF
			END_IF
		E_ErgonomicStates.JogStepper1:
			IF fbStepper.Busy THEN
				sErrorDetails := 'fbStepper.Busy = TRUE';
				fbEventHandler(eNapID:=E_Event.SYSTEM_IN_UNEXPECTED_STATE,sMessage:=sErrorDetails);
				bError := TRUE;
			ELSE	
				IF fbStepper.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sTrace:=fbStepper.EventTrace);
					fbStepper.ErrorAck := TRUE;
					bError := TRUE;
				ELSE
					fbStepper.bStartErgoJog:=TRUE;
					ChangeInnerState(E_ErgonomicStates.JogStepper2);
				END_IF
			END_IF
		E_ErgonomicStates.JogStepper2:
			IF fbStepper.Busy THEN
			ELSE	
				IF fbStepper.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbStepper.EventTrace);
					fbStepper.ErrorAck := TRUE;
					bError := TRUE;
				ELSE
					ChangeInnerState(E_ErgonomicStates.WaitForCommand);
				END_IF
			END_IF
		E_ErgonomicStates.JogLinActuator1:
			IF fbLinearActuator.Busy THEN
				sErrorDetails := 'fbStepper.Busy = TRUE';
				fbEventHandler(eNapID:=E_Event.SYSTEM_IN_UNEXPECTED_STATE,sMessage:=sErrorDetails);
				bError := TRUE;
			ELSE	
				IF fbLinearActuator.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_START_TASK,sTrace:=fbLinearActuator.EventTrace);
					fbLinearActuator.ErrorAck := TRUE;
					bError := TRUE;
				ELSE
					fbLinearActuator.bStartJogging := TRUE;
					ChangeInnerState(E_ErgonomicStates.JogLinActuator2);
				END_IF
			END_IF
		E_ErgonomicStates.JogLinActuator2:
			IF fbLinearActuator.Busy THEN
			ELSE	
				IF fbLinearActuator.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbLinearActuator.EventTrace);
					fbLinearActuator.ErrorAck := TRUE;
					bError := TRUE;
				ELSE
					ChangeInnerState(E_ErgonomicStates.WaitForCommand);
				END_IF
			END_IF
		E_ErgonomicStates.DisableMotors1:
			IF NOT (fbStepper.Ready AND fbLinearActuator.Ready) THEN
				sErrorDetails := CONCAT('fbStepper.Ready/fbLinearActuator.Ready = ',CONCAT(BOOL_TO_STRING(fbStepper.Ready),BOOL_TO_STRING(fbLinearActuator.Ready)));
				fbEventHandler(eNapID:=E_Event.SYSTEM_IN_UNEXPECTED_STATE,sMessage:=sErrorDetails);
				bError := TRUE;
			ELSE
				fbLinearActuator.bDisableAxis := TRUE;	
				fbStepper.bDisableAxis := TRUE;
				ChangeInnerState(E_ErgonomicStates.DisableMotors2);
			END_IF
		E_ErgonomicStates.DisableMotors2:
			IF fbLinearActuator.Busy THEN
				bMotorsDisabled := FALSE;
			ELSIF fbLinearActuator.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbLinearActuator.EventTrace);
					fbLinearActuator.ErrorAck := TRUE;
					bError := TRUE;
			END_IF
			IF fbStepper.Busy THEN
				bMotorsDisabled := FALSE;
			ELSIF fbStepper.bError THEN
					fbEventHandler(eNapID:=E_Event.UNABLE_TO_COMPLETE_TASK,sTrace:=fbStepper.EventTrace);
					fbStepper.ErrorAck := TRUE;
					bError := TRUE;
			END_IF
			IF bMotorsDisabled THEN
				ChangeInnerState(E_ErgonomicStates.Idle);
			END_IF
	END_CASE


States found:
	eInnerState
Methods Found:
	InnerLoopSM
Method-Case Pairs Found:

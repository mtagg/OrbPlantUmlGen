<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_StepperHoming" Id="{02f8ef0c-5a00-4080-a395-cb849d80913d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StepperHoming EXTENDS FB_StateMachine IMPLEMENTS  I_StateMachine
VAR_INPUT
	bStart : BOOL;	
	
	stParentsAxis : REFERENCE TO ST_StepperAxis;
	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	eInnerState : E_StepperHomingStates;
	bCompleted : BOOL;
	dtTimeCompleted: DATE_AND_TIME;
	
	bEnabledBeforeHoming : BOOL;
	bOutsideHome AT %I* : BOOL;
	fRelativePosition 		: LREAL;
	fAbsolutePosition		: LREAL;
	
	stAxisRef : REFERENCE TO AXIS_REF;
	fbPower : MC_Power;
	fbReset :MC_Reset;
	fbHalt : MC_Halt;
	fbJog : MC_JOG;
	fbHome : MC_Home;
	bOutwardsForward	: REFERENCE TO BOOL;
	bOutwardsBackwards	: REFERENCE TO BOOL;
	bInwardsForward		: REFERENCE TO BOOL;
	bInwardsBackwards	: REFERENCE TO BOOL;
	fHomePosition		: REFERENCE TO LREAL;
	bForceHoming : REFERENCE TO BOOL;
	nPLC_Cycles	: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[OuterLopSM();]]></ST>
    </Implementation>
    <Folder Name="Properties" Id="{16e96894-613b-4510-b160-c7745d2583f5}" />
    <Property Name="Angle" Id="{d5e9e495-261b-48a4-a146-d0b6127ddca7}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Angle : LREAL]]></Declaration>
      <Get Name="Get" Id="{3ce02f1e-fa30-4779-86c3-afa2141de322}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Angle := stAxisRef.NcToPlc.ActPos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Disable" Id="{2cb3ba08-48bc-4ada-b68b-4bc909bee3d1}">
      <Declaration><![CDATA[METHOD Disable : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[bBusy := TRUE;
fbPower(Axis:=stAxisRef,Enable:=FALSE);

IF fbPower.Status = FALSE THEN
	Disable := TRUE;
ELSIF fbPower.Error THEN
	fbEventHandler(nBeckhoffID:=fbPower.ErrorID);
	{warning 'TODO: trigger e-stop'}
	Disable := TRUE;
ELSE // wait for fbPower to disable Axis 
	Disable := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="HomingNeeded" Id="{b520ae64-639c-45df-8d50-027d7c3a6b31}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY HomingNeeded : BOOL]]></Declaration>
      <Get Name="Get" Id="{c8d57e3f-f04f-464a-8306-fceb94c76e94}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[// TODO: Check if dtTimeCompleted is too old. If so set HomingNeeded := TRUE
IF bForceHoming THEN
	HomingNeeded := TRUE;
ELSE
	HomingNeeded := NOT bCompleted;
END_IF
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="InnerLoopSM" Id="{6520a2ec-f048-42e4-86c6-b710b0c82fde}">
      <Declaration><![CDATA[METHOD InnerLoopSM : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// update all children FBs
fbPower(Axis:=stAxisRef);
fbReset(Axis:=stAxisRef);
fbJog(Axis:=stAxisRef);

CASE CyclicInnerCase(TO_STRING(eInnerState)) OF
	E_StepperHomingStates.Idle:
		IF bStart THEN
			bStart := FALSE;
			IF HomingNeeded THEN
				ChangeInnerState(E_StepperHomingStates.CheckIfEnabled);
			ELSE
				// Stay in Idle as homing is not needed
			END_IF
		END_IF

	E_StepperHomingStates.CheckIfEnabled:
		bEnabledBeforeHoming := fbPower.Status; // fbPower.Status = TRUE if stAxisRef is enabled
		ChangeInnerState(E_StepperHomingStates.ResetAxis1);
		
	E_StepperHomingStates.ResetAxis1:
		fbReset(Axis:=stAxisRef,Execute:=TRUE);
		nPLC_Cycles := 0;
		ChangeInnerState(E_StepperHomingStates.ResetAxis2);
		
	E_StepperHomingStates.ResetAxis2:
		nPLC_Cycles := nPLC_Cycles +1; // # of PLC cycles since reset was started
		IF fbReset.Done THEN
			IF bEnabledBeforeHoming THEN
				ChangeInnerState(E_StepperHomingStates.HomeSensorCheck);
			ELSE
				ChangeInnerState(E_StepperHomingStates.EnableAxis1);
			END_IF
		ELSIF fbReset.Error THEN
			fbEventHandler(nBeckhoffID:=fbReset.ErrorID);
			
			bError := TRUE;
		ELSE
			IF nPLC_Cycles > SystemConfig.nSTEPPER_MAX_CYCLES_TO_RESET THEN
				sErrorDetails := CONCAT3('fbReset.Done=FALSE after ',LINT_TO_STRING(SystemConfig.nSTEPPER_MAX_CYCLES_TO_RESET), ' PLC cycles');
				fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
		
				bError := TRUE;
			ELSE
				// wait... fbReset is still busy
			END_IF
			
		END_IF
		
	E_StepperHomingStates.EnableAxis1:
		fbPower(Axis:=stAxisRef,Enable:=TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE);
		nPLC_Cycles := 0;
		ChangeInnerState(E_StepperHomingStates.EnableAxis2);
		
	E_StepperHomingStates.EnableAxis2:
		nPLC_Cycles := nPLC_Cycles +1; // # of PLC cycles since power command was started
		IF fbPower.Error THEN
			fbEventHandler(nBeckhoffID:=fbPower.ErrorID);
			bError := TRUE;
		ELSIF fbPower.Status = TRUE THEN // fbPower.Status = TRUE if stAxisRef is enabled
			sErrorDetails := CONCAT('# of Cycles to Enable Axis=',LINT_TO_STRING(nPLC_Cycles));
			fbEventHandler(eNapID:=E_Event.REQUEST_COMPLETED,sMessage:=sErrorDetails);
			
			fbReset(Axis:=stAxisRef,Execute:=FALSE); // reset FB to prepare it for next call 
			ChangeInnerState(E_StepperHomingStates.HomeSensorCheck);
		ELSE
			IF nPLC_Cycles > SystemConfig.nSTEPPER_MAX_CYCLES_TO_ENABLE THEN
				sErrorDetails := CONCAT3('fbPower.Status=FALSE after ',LINT_TO_STRING(SystemConfig.nSTEPPER_MAX_CYCLES_TO_ENABLE), ' PLC cycles');
				fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
		
				bError := TRUE;
			ELSE
				// Wait...	fbPower is still busy 		
			END_IF
		END_IF
		
	E_StepperHomingStates.HomeSensorCheck:
		fRelativePosition := Angle;			// save current uncalibrated position
		IF bOutsideHome THEN
			ChangeInnerState(E_StepperHomingStates.OutwardMotion);
		ELSE
			ChangeInnerState(E_StepperHomingStates.InwardMotion);
		END_IF
		
	E_StepperHomingStates.OutwardMotion:
		IF ABS(fRelativePosition - Angle) > (SystemConfig.fSTEPPER_MAX_INWARDS_POSITION + 2) THEN
			sErrorDetails := 'Unable to find home active zone after moving outwards more than the stepper max range of motion';
			fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
	
			bError := TRUE;
		ELSE
			fbJog(Axis:=stAxisRef, Mode:=MC_JOGMODE_CONTINOUS, JogForward:=bOutwardsForward, JogBackwards:=bOutwardsBackwards,Velocity:=SystemConfig.fSTEPPER_HOMING_FAST_SPEED);
			IF fbJog.Error THEN
				fbEventHandler(nBeckhoffID:=fbJog.ErrorID);
			
				bError := TRUE;
			ELSIF fbJog.CommandAborted THEN
				sErrorDetails := 'fbJog.CommandAborted=TRUE';
				fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
		
				bError := TRUE;
			ELSE
				IF fbJog.Done THEN
					sErrorDetails := 'fbJog.Done=TRUE unexpectedly';
					fbEventHandler(eNapID:=E_Event.TASK_WARNING,sMessage:=sErrorDetails);
				END_IF
				IF NOT bOutsideHome THEN
					fbJog(Axis:=stAxisRef, JogForward:=FALSE, JogBackwards:=FALSE); // reset jog
					fRelativePosition := Angle;	// save current uncalibrated position
					ChangeInnerState(E_StepperHomingStates.InwardMotion);
				ELSE 
					// wait
				END_IF
			END_IF
		END_IF

	E_StepperHomingStates.InwardMotion:
		IF ABS(fRelativePosition - Angle) > (SystemConfig.fSTEPPER_HOME_ZONE_WIDTH + 2) THEN
			sErrorDetails := 'Unable to find home active zone after moving inwards more than expected home active zone width';
			fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
	
			bError := TRUE;
		ELSE
			fbJog(Axis:=stAxisRef, Mode:=MC_JOGMODE_CONTINOUS, JogForward:=bInwardsForward, JogBackwards:=bInwardsBackwards,Velocity:=SystemConfig.fSTEPPER_HOMING_FAST_SPEED);
			IF fbJog.Error THEN
				fbEventHandler(nBeckhoffID:=fbJog.ErrorID);
			
				bError := TRUE;
			ELSIF fbJog.CommandAborted THEN
				sErrorDetails := 'fbJog.CommandAborted=TRUE';
				fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
		
				bError := TRUE;
			ELSE
				IF fbJog.Done THEN
					sErrorDetails := 'fbJog.Done=TRUE unexpectedly';
					fbEventHandler(eNapID:=E_Event.TASK_WARNING,sMessage:=sErrorDetails);
				END_IF
				IF bOutsideHome THEN
					fbJog(Axis:=stAxisRef, JogForward:=FALSE, JogBackwards:=FALSE); // reset jog
					fRelativePosition := Angle;	// save current uncalibrated position
					ChangeInnerState(E_StepperHomingStates.OutwardCreep);
				ELSE 
					// wait
				END_IF
			END_IF
		END_IF

		
	E_StepperHomingStates.OutwardCreep:
		IF ABS(fRelativePosition - Angle) > (SystemConfig.fSTEPPER_HOME_ZONE_WIDTH) THEN
			sErrorDetails := 'Unable to find home active zone after moving outwards more than expected home active zone width';
			fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
	
			bError := TRUE;
		ELSE
			IF bOutsideHome THEN
				fbJog(Axis:=stAxisRef, Mode:=MC_JOGMODE_CONTINOUS, JogForward:=bOutwardsForward, JogBackwards:=bOutwardsBackwards,Velocity:=SystemConfig.fSTEPPER_HOMING_SLOW_SPEED);
				IF fbJog.Error THEN
					fbEventHandler(nBeckhoffID:=fbJog.ErrorID);
				
					bError := TRUE;
				ELSIF fbJog.CommandAborted THEN
					sErrorDetails := 'fbJog.CommandAborted=TRUE';
					fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
			
					bError := TRUE;
				ELSE
					IF fbJog.Done THEN
						sErrorDetails := 'fbJog.Done=TRUE unexpectedly';
						fbEventHandler(eNapID:=E_Event.TASK_WARNING,sMessage:=sErrorDetails);
					END_IF
					// wait... fbJog.busy (moving) 
				END_IF
			ELSE
				fbJog(Axis:=stAxisRef, JogForward:=FALSE, JogBackwards:=FALSE); // reset jog
				fRelativePosition := Angle;	// save current uncalibrated position
				ChangeInnerState(E_StepperHomingStates.WaitingForHalt);
			END_IF
		END_IF
		
	E_StepperHomingStates.WaitingForHalt:
		fbHalt(Axis:=stAxisRef,Execute:=TRUE);
		IF fbHalt.Done THEN
			fbHalt(Axis:=stAxisRef,Execute:=FALSE);
			ChangeInnerState(E_StepperHomingStates.GettingCurrentPos);
		ELSIF fbHalt.Error THEN
			fbEventHandler(nBeckhoffID:=fbHalt.ErrorID);
				
			bError := TRUE;
		ELSE
			// wait... fbHalt.busy
		END_IF

	E_StepperHomingStates.GettingCurrentPos:
		fAbsolutePosition := fHomePosition + (Angle - fRelativePosition);
		ChangeInnerState(E_StepperHomingStates.SettingHomePos);
	
	E_StepperHomingStates.SettingHomePos:
		fbHome(Axis:=stAxisRef, Execute:=TRUE, Position:=fAbsolutePosition, HomingMode:=MC_HomingMode.MC_Direct);
		IF fbHome.Error THEN
			fbEventHandler(nBeckhoffID:=fbHome.ErrorID);
		
			bError := TRUE;
		ELSIF fbHome.CommandAborted THEN
			sErrorDetails := 'fbHome.CommandAborted=TRUE';
			fbEventHandler(eNapID:=E_Event.TASK_FAILED,sMessage:=sErrorDetails);
	
			bError := TRUE;
		ELSIF fbHome.Done THEN
			fbHome(Axis:=stAxisRef, Execute:=FALSE); // reset homing command
			IF bEnabledBeforeHoming THEN
				ChangeInnerState(E_StepperHomingStates.WrapUp);
			ELSE
				ChangeInnerState(E_StepperHomingStates.DisableAxis);
			END_IF
		ELSE
			// wait... fbHome.busy
		END_IF
		
	E_StepperHomingStates.DisableAxis:
		fbPower(Axis:=stAxisRef,Enable:=FALSE);
		IF fbPower.Error THEN
			fbEventHandler(nBeckhoffID:=fbPower.ErrorID);
			bError := TRUE;
		ELSIF fbPower.Status = FALSE THEN // fbPower.Status = FALSE if stAxisRef is disabled
			ChangeInnerState(E_StepperHomingStates.WrapUp);
		ELSE
			// Wait...	fbPower is still busy 		
		END_IF

	
	E_StepperHomingStates.WrapUp:
		bCompleted := TRUE;
		dtTimeCompleted := DateTime.GVL_DATE_TIME;
		ChangeInnerState(E_StepperHomingStates.Idle);
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{f0bd47d6-c200-481f-868a-da6daf0066cc}">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// reset variables specific to this FB 
bCompleted := FALSE;
dtTimeCompleted := DATE_AND_TIME#1970-1-1-0:0:0;

// Reactivate children FBs
//none]]></ST>
      </Implementation>
    </Method>
    <Method Name="Setup" Id="{38ac2a80-93ba-4a8f-b6b0-8eb833401930}">
      <Declaration><![CDATA[METHOD Setup : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eStateMachineSourceID := eStateSourceID;
stAxisRef REF= stParentsAxis.stAxisRef;

bOutwardsForward 	REF= stParentsAxis.bOutwardsForward;
bOutwardsBackwards	REF= stParentsAxis.bOutwardsBackwards;
bInwardsForward		REF= stParentsAxis.bInwardsForward;
bInwardsBackwards	REF= stParentsAxis.bInwardsBackwards;
fHomePosition		REF= stParentsAxis.fHomePosition;
bForceHoming REF= stParentsAxis.bForceHoming;

SetInnerEnumeration(nStateEnum:=THIS^.eInnerState);]]></ST>
      </Implementation>
    </Method>
    <Property Name="TimeCompleted" Id="{09f49961-ab82-4f90-9aa9-2db523e21ec7}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TimeCompleted : DATE_AND_TIME]]></Declaration>
      <Get Name="Get" Id="{4445d525-ba0b-4652-81d7-5602accba4d9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TimeCompleted := dtTimeCompleted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_StepperHoming">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.Angle.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.Disable">
      <LineId Id="7" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.HomingNeeded.Get">
      <LineId Id="20" Count="2" />
      <LineId Id="24" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.InnerLoopSM">
      <LineId Id="152" Count="2" />
      <LineId Id="296" Count="0" />
      <LineId Id="155" Count="2" />
      <LineId Id="159" Count="9" />
      <LineId Id="170" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="569" Count="2" />
      <LineId Id="596" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="590" Count="3" />
      <LineId Id="589" Count="0" />
      <LineId Id="575" Count="13" />
      <LineId Id="563" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="179" Count="3" />
      <LineId Id="594" Count="0" />
      <LineId Id="185" Count="7" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="193" Count="8" />
      <LineId Id="203" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="253" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="261" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="293" Count="2" />
      <LineId Id="269" Count="3" />
      <LineId Id="297" Count="1" />
      <LineId Id="275" Count="1" />
      <LineId Id="300" Count="2" />
      <LineId Id="299" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="303" Count="0" />
      <LineId Id="282" Count="4" />
      <LineId Id="288" Count="4" />
      <LineId Id="228" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="371" Count="27" />
      <LineId Id="366" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="405" Count="5" />
      <LineId Id="435" Count="1" />
      <LineId Id="412" Count="13" />
      <LineId Id="431" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="440" Count="1" />
      <LineId Id="438" Count="1" />
      <LineId Id="434" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="474" Count="2" />
      <LineId Id="478" Count="1" />
      <LineId Id="481" Count="1" />
      <LineId Id="480" Count="0" />
      <LineId Id="484" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="487" Count="1" />
      <LineId Id="502" Count="1" />
      <LineId Id="265" Count="0" />
      <LineId Id="507" Count="2" />
      <LineId Id="512" Count="1" />
      <LineId Id="510" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="516" Count="2" />
      <LineId Id="515" Count="0" />
      <LineId Id="521" Count="1" />
      <LineId Id="524" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="528" Count="1" />
      <LineId Id="527" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="544" Count="3" />
      <LineId Id="562" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="560" Count="1" />
      <LineId Id="534" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="234" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.Reset">
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.Setup">
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_StepperHoming.TimeCompleted.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>